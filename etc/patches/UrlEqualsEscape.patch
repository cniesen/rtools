Index: core/impl/src/main/java/org/kuali/rice/core/web/EscapeUrlEqualsSignFilter.java
===================================================================
--- core/impl/src/main/java/org/kuali/rice/core/web/EscapeUrlEqualsSignFilter.java	(revision 0)
+++ core/impl/src/main/java/org/kuali/rice/core/web/EscapeUrlEqualsSignFilter.java	(revision 0)
@@ -0,0 +1,64 @@
+/**
+ * Copyright 2005-2012 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl2.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */package org.kuali.rice.core.web;
+
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+/**
+ *
+ * @author Kuali Rice Team (rice.collab@kuali.org)
+ */
+public class EscapeUrlEqualsSignFilter implements Filter {
+    private Pattern pattern;
+    @Override
+    public void init(FilterConfig filterConfig) throws ServletException {
+        pattern =  Pattern.compile("href=\"((.*)=(.*))\""); // href with equals sign in it
+    }
+
+    @Override
+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
+        PrintWriter printWriter = servletResponse.getWriter();
+        CharArrayWriterHttpServletResponseWrapper wrapper = new CharArrayWriterHttpServletResponseWrapper((HttpServletResponse) servletResponse);
+        filterChain.doFilter(servletRequest, wrapper);
+
+        String html = wrapper.toString();
+        Matcher matcher = pattern.matcher(html);
+        while (matcher.find()) {
+            if (matcher.groupCount() > 0) {
+                String url = matcher.group(0);
+                html = html.replaceAll(url, url.replaceAll("=", "%3d"));
+            }
+        }
+
+        servletResponse.setContentLength(html.getBytes().length);
+        printWriter.write(html);
+        printWriter.close();
+    }
+
+    @Override
+    public void destroy() {
+        pattern = null;
+    }
+}
Index: core/impl/src/main/java/org/kuali/rice/core/web/CharArrayWriterHttpServletResponseWrapper.java
===================================================================
--- core/impl/src/main/java/org/kuali/rice/core/web/CharArrayWriterHttpServletResponseWrapper.java	(revision 0)
+++ core/impl/src/main/java/org/kuali/rice/core/web/CharArrayWriterHttpServletResponseWrapper.java	(revision 0)
@@ -0,0 +1,40 @@
+/**
+ * Copyright 2005-2012 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl2.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.web;
+
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpServletResponseWrapper;
+import java.io.CharArrayWriter;
+
+/**
+ *
+ * @author Kuali Rice Team (rice.collab@kuali.org)
+ */
+public class CharArrayWriterHttpServletResponseWrapper extends HttpServletResponseWrapper {
+    private CharArrayWriter charArrayWriter;
+    /**
+     * Call super's constructor and initialize the internal CharArrayWriter
+     * @param response HttpServletResponse
+     */
+    public CharArrayWriterHttpServletResponseWrapper(HttpServletResponse response) {
+        super(response);
+        this.charArrayWriter = new CharArrayWriter();
+    }
+    @Override
+    public String toString() {
+        return this.charArrayWriter.toString();
+    }
+}
